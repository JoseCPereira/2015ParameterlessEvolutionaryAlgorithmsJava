############################################# PARAMETERS.TXT #############################################
#
# This file sets all parameters necessary for the Parameterless Method.
# This file as four parts:
#
#	 @PARAMETERLESS	--> Set some general parameters for the Parameterless method such as number of runs, arity, etc.
#	 @EA         -----> Define which algorithm is going to solve problem. 
# 	 @PROBLEM    -----> Define which problem to be solved. 
#    @PARAMETERS -----> Set all general parameters for the Bisection method such as initial population size,
#                    	stop criteria, number of runs, etc. 
#	 @OUTPUT     -----> Define what should be included in the output files (population, statistics, etc.).
#
############################################# PARAMETERS.TXT #############################################
#
############## PARAMETERLESS ########## PARAMETERLESS ########## PARAMETERLESS ##############

########## PARRUNS ##########
# Number of runs to perform for the same problem.
# Default = 1
parRuns = 3
########## END PARRUNS ##########
#
########## NEXT SOLVER ##########
# Number of generations to perform before next Solver.
# Set nextSolver = 0 to perform a Standalone EA
# Default = 4                               // CHECK: Harik and Lobo: "A Parameter-less Genetic Algorithm", 1999
nextSolver = 4
########## END NEXT SOLVER ##########
#
########## INITIAL POPULATION ##########
# Initial population size
# Default = 10								// NOTE: N0 MUST be even when performing PARAMETERLESSSGA!
N0 = 10
########## END INITIAL POPULATION ##########
#
#
#
############# EVOLUTIONARY ALGORITHM ########## EVOLUTIONARY ALGORITHM ##############
# This part of the file contains a list of all the EAs that
# can be used by the Parameterless Method.
# Each EAlgorithm has to be defined has a class which implements
# interface IEAlgorithm in the file 'IEAlgorithm.java'.
# See 'ReadMe.txt' for instructions.
#
# Choose an option for 'eAlg' from the menu
# #### HBOA ####
#	0   -> SGA
#	1   -> UMDA
#	2	-> ECGA
#	3   -> HBOA
#
# Default = 0 (SGA)
eAlg = 3

# For each EA it is necessary to provide the corresponding parameter file.
# Choose an option for 'eaParamFile' from the menu
#### HBOA ####
#	EA: 0  -> SGAParameters.txt	 		(SGA)
#	EA: 1  -> UMDAParameters.txt		(UMDA)
#	EA: 2  -> ECGAParameters.txt		(ECGA)
#	EA: 3  -> HBOAParameters.txt	 	(HBOA)
#
# Default = SGAParameters.txt (eAlg = 0)
eaParamFile = HBOAParameters.txt

############# EVOLUTIONARY ALGORITHM ########## EVOLUTIONARY ALGORITHM ##############
#
############## PARAMETERLESS ########## PARAMETERLESS ########## PARAMETERLESS ##############
#
#
#
############# PROBLEM ########## PROBLEM ########## PROBLEM ##############
#
# This part of the file contains a list of all
# problems to be solved by the Parameter-less EA.
# Each problem has to be defined has a class which implements
# interface IProblem in the file 'Problem.java'. 
# See technical report for instructions.
#
# Choose an option for 'problem' from the menu
# ZERO Problems
#	0   -> ZeroMax						(stringSize = n)
# 	1   -> Zero Quadratic		 		(stringSize = 2n)
#	2   -> Zero 3-Deceptive	 			(stringSize = 3n)
#	3   -> Zero 3-Deceptive Bipolar 	(stringSize = 6n)	
#	4   -> Zero 3-Deceptive Overlapping (stringSize = 2n+1)
#	5   -> Zero Trap-k 		 			(stringSize = kn)
#	6   -> Zero Uniform 6-Blocks	 	(stringSize = 6n)	
# ONE Problems
#   10  -> OneMax              			(stringSize = n)
# 	11  -> Quadratic		 			(stringSize = 2n)
#	12  -> 3-Deceptive	 				(stringSize = 3n)
#	13  -> 3-Deceptive Bipolar 			(stringSize = 6n)
#	14  -> 3-Deceptive Overlapping 		(stringSize = 2n+1)
#	15  -> Trap-k 		 				(stringSize = kn)
#	16  -> Uniform 6-Blocks	 			(stringSize = 6n)
# OTHER Problems	
#	21 -> Hierarchical Trap	One			(stringSize = 3^n)
#	22 -> Hierarchical Trap	Two			(stringSize = 3^n)
#	30 -> Ising Spin Glasses  			(stringSize = ??)	// NOT IMPLEMENTED!!
#
#
# Problem type.
# Default = 10 (OneMax)
problemType = 10

# Order of the TRAP-K problems.
# CAUTION!! This is only for TRAP-K problems.
# Default = 4
kay = 4

# Set the 'stringSize' in accordance with the chosen problem
# Default = 8 (OneMax size)
stringSize = 40

# NOTE: Both stop criteria 4 and 5 depend on the optimum value.
#		The user is responsible for setting the optimum value
#		correctly, according with the chosen problem.
# No default. It is problem dependent.					
optimumValue = 40

# Proportionality constant between the string size and the
# standard deviation for fitness noise. We define:
#
#		sigma = sigmaK * n
#
# NOTE: Noise is a random variable with a normal distribution
#		with average 0 and standard deviation 'sigma'.
# Default = 0 (non-NOISY problems)
sigmaK = 0

############# PROBLEM ########## PROBLEM ########## PROBLEM ##############



########## STOP CRITERIA ##########
#
#
# 1 - Maximal number of generations to perform.
# Default = 200000000  					// NOTE: choose a very large maxNGen or, better yet, implement option -1 (inactive).
maxNGen = 200000000

# 2 - Maximal number of fitness calls. 
# Default = -1 (unbounded)
maxFitCalls = -1

# 3 - Stop if all individuals have the same fitness. 
# Default = -1 (ignore) 
allFitnessEqual = -1

# 4 - Termination threshold for the univariate frequencies.
# NOTE: Proportion of either 1's or 0's is at least epsilon for all variables Xi.
# CAUTION!! If epsilon == 1 use Worst Replacement (HBOA) to ensure halting!
# Default = -1 (ignore)
epsilon = -1

# 5 - Proportion of optimal individuals threshold.	(needs optimumValue)
# NOTE: maxOptimal is the maximum proportion of individuals with optimum
#		fitness to be found in the population.
# Default = -1 (ignore)
maxOptimal = -1

# 6 - Stop if the best fitness was found?
# 			-1 -> No
#			 1 -> Yes		(needs optimumValue)		
# Default = -1 (ignore)
foundBestFit = -1  

# 7 - Stop if the string of ones (or zeros) was found?
#			-1 -> Ignore
#			 0 -> Stop with zeros	(Zero Problems)
#			 1 -> Stop with ones	( One Problems)  
# CAUTION!! This criterium is for test only!
# Default = -1 (ignore)
foundOnes = 1

########## END STOP CRITERIA ##########



# End of File!